{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","search","setSearch","animals","setAnimals","pictures","setPictures","flickrUrl","useEffect","getPicturesSources","axios","get","then","picturesSources","data","photos","photo","filter","title","toLowerCase","indexOf","map","farm","server","id","secret","src","setKindOfAnimals","target","innerHTML","className","type","onClick","onChange","value","placeholder","length","key","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRA0DeA,G,MAtDH,WAAO,IAAD,EAEYC,mBAAS,IAFrB,mBAETC,EAFS,KAEDC,EAFC,OAGcF,mBAAS,QAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIgBJ,mBAAS,IAJzB,mBAITK,EAJS,KAICC,EAJD,KAOVC,EAAS,oFADA,mCACA,iBAA+FJ,EAA/F,qCAEfK,qBAAU,WACRC,MACC,CAACR,EAAQE,IAEZ,IAAMM,EAAqB,kBAAMC,IAAMC,IAAIJ,GACxCK,MAAK,YAAe,IACbC,EADY,EAAXC,KACsBC,OAAOC,MACjCC,QAAO,mBAAsE,IAAtE,EAAGC,MAAkBC,cAAcC,QAAQnB,EAAOkB,kBACzDE,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,GAAIC,EAArB,EAAqBA,OAArB,MAA0C,CAC7CD,GAAIA,EACJN,MAFG,EAA6BA,MAGhCQ,IAAI,eAAD,OAAiBJ,EAAjB,6BAA0CC,EAA1C,YAAoDC,EAApD,YAA0DC,EAA1D,YAEPnB,EAAYO,OAIVc,EAAmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAAgBxB,EAAWwB,EAAOC,YAE3D,OACE,yBAAKC,UAAU,wCACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,mCACb,wBAAIA,UAAU,QAAd,8BACA,4BAAQC,KAAK,SAASD,UAAU,0BAA0BE,QAASL,GAAnE,QACA,4BAAQI,KAAK,SAASD,UAAU,0BAA0BE,QAASL,GAAnE,SAEF,2BAAOI,KAAK,SAASE,SAXV,SAAC,GAAD,IAAGL,EAAH,EAAGA,OAAH,OAAgB1B,EAAU0B,EAAOM,QAWHC,YAAY,iBAAiBL,UAAU,iCAChF,yBAAKA,UAAU,0CAEX7B,IAAWI,EAAS+B,OAClB,4CACA/B,EAASgB,KAAI,gBAAGH,EAAH,EAAGA,MAAOQ,EAAV,EAAUA,IAAKF,EAAf,EAAeA,GAAf,OACX,yBAAKM,UAAU,gEAAgEO,IAAKb,GAClF,yBAAKE,IAAKA,EAAKY,IAAKpB,EAAOY,UAAU,sBACrC,8BAAOZ,YCpCLqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.64479b7e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.scss';\n\nconst App = () => {\n\n  const [search, setSearch] = useState(''); \n  const [animals, setAnimals] = useState('cats');\n  const [pictures, setPictures] = useState([]);\n\n  const apiKey = '6b3575d10435de5f010fc941f5eff94a';\n  const flickrUrl = `https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${animals}&&format=json&nojsoncallback=true`;\n\n  useEffect(() => {\n    getPicturesSources();\n  }, [search, animals]);\n\n  const getPicturesSources = () => axios.get(flickrUrl)\n    .then(({ data }) => {\n      const picturesSources = data.photos.photo\n        .filter(({ title }) => title.toLowerCase().indexOf(search.toLowerCase()) !== -1)\n        .map(({ farm, server, id, secret, title }) => ({\n          id: id,\n          title: title,\n          src: `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n        }))\n      setPictures(picturesSources);\n    });\n\n  const onSearch = ({ target }) => setSearch(target.value);\n  const setKindOfAnimals = ({ target }) => setAnimals(target.innerHTML);\n\n  return (\n    <div className=\"search-app d-flex align-items-center\">\n      <div className=\"container\">\n        <div className=\"btn-group search-app__btn-group\">\n          <h5 className=\"mt-5\">Who are you looking for?:)</h5>\n          <button type=\"button\" className=\"btn btn-outline-primary\" onClick={setKindOfAnimals}>Cats</button>\n          <button type=\"button\" className=\"btn btn-outline-primary\" onClick={setKindOfAnimals}>Dogs</button>\n        </div>\n        <input type=\"search\" onChange={onSearch} placeholder=\"Search by name\" className=\"search-app__input col-6 mt-3\" />\n        <div className=\"row mt-3 d-flex justify-content-center\">\n          {\n            search && !pictures.length ?\n              <p>No results :(</p> :\n              pictures.map(({ title, src, id }) => (\n                <div className=\"col-md-4 col-sm-6 mt-3 d-flex flex-column justify-content-end\" key={id}>\n                  <img src={src} alt={title} className=\"search-app__image\" />\n                  <span>{title}</span>\n                </div>\n              ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}